syntax = "proto2";
package service.v1;

service BrongnalService {
  rpc RegisterPreKeyBundle(RegisterPreKeyBundleRequest) returns (RegisterPreKeyBundleResponse);
  rpc RequestPreKeys(PreKeyBundleRequest) returns (PreKeyBundle);
  rpc SendMessage(SendMessageRequest) returns (SendMessageResponse);
  rpc RetrieveMessages(RetrieveMessagesRequest) returns (stream Message);
}

message SignedPreKey {
  // X25519 public key
  optional bytes pre_key = 1;

  // ED25519 signature
  optional bytes signature = 2;
}

message SignedPreKeys {
  // X25519 public keys
  repeated bytes pre_keys = 1;

  // ED25519 signature over pre_keys.length() || pre_keys
  optional bytes signature = 2;
}

message RegisterPreKeyBundleRequest {
  // ED25519 public key
  optional bytes identity_key = 1;

  // The current signed pre key associated with `identity_key`.
  optional SignedPreKey signed_pre_key = 2;

  // Optional - Appends the one time key bundle for this `identity_key`.
  optional SignedPreKeys one_time_key_bundle = 3;
}

message RegisterPreKeyBundleResponse {
	optional uint32 num_keys = 1;
}

message PreKeyBundleRequest {
  // ED25519 public key
  optional bytes identity_key = 1;
}

message PreKeyBundle {
  // ED25519 public key
  optional bytes identity_key = 1;

  // X25519 public key
  optional bytes one_time_key = 2;

  optional SignedPreKey signed_pre_key = 3;
}

message Message {
  // ED25519 public key
  optional bytes sender_identity_key = 1;

  // X25519 public key
  optional bytes ephemeral_key = 2;

  // X25519 public key
  optional bytes pre_key = 3;

  // X25519 public key (Optional)
  optional bytes one_time_key = 4;

  // binary
  optional bytes ciphertext = 5;
}

message SendMessageRequest {
  optional Message message = 1;

  // Ed25519 public key
  optional bytes recipient_identity_key = 2;
}

message SendMessageResponse {}

message RetrieveMessagesRequest {
  // Recipients identity key.
  optional bytes identity_key = 1;

  // TODO(https://github.com/brongan/brongnal/issues/14) - Add proof of possession.
}
